// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enumMessage.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "EnumMessage.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - EnumMessageRoot

@implementation EnumMessageRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - Enum ResProtoType

GPBEnumDescriptor *ResProtoType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ResDefault\000ResExp\000ResGold\000ResSilver\000ResC"
        "opper\000ResBlueGem\000ResRedGem\000ResYellowGem\000"
        "ResJifen\000";
    static const int32_t values[] = {
        ResProtoType_ResDefault,
        ResProtoType_ResExp,
        ResProtoType_ResGold,
        ResProtoType_ResSilver,
        ResProtoType_ResCopper,
        ResProtoType_ResBlueGem,
        ResProtoType_ResRedGem,
        ResProtoType_ResYellowGem,
        ResProtoType_ResJifen,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ResProtoType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ResProtoType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ResProtoType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ResProtoType_ResDefault:
    case ResProtoType_ResExp:
    case ResProtoType_ResGold:
    case ResProtoType_ResSilver:
    case ResProtoType_ResCopper:
    case ResProtoType_ResBlueGem:
    case ResProtoType_ResRedGem:
    case ResProtoType_ResYellowGem:
    case ResProtoType_ResJifen:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
