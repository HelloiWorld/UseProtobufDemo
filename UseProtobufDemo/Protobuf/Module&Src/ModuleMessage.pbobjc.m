// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: moduleMessage.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ModuleMessage.pbobjc.h"
 #import "EnumMessage.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ModuleMessageRoot

@implementation ModuleMessageRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ModuleMessageRoot_FileDescriptor

static GPBFileDescriptor *ModuleMessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Error_Rsp

@implementation Error_Rsp

@dynamic errorCode;

typedef struct Error_Rsp__storage_ {
  uint32_t _has_storage_[1];
  int32_t errorCode;
} Error_Rsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errorCode",
        .dataTypeSpecific.className = NULL,
        .number = Error_Rsp_FieldNumber_ErrorCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Error_Rsp__storage_, errorCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Error_Rsp class]
                                     rootClass:[ModuleMessageRoot class]
                                          file:ModuleMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Error_Rsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Empty_Req

@implementation Empty_Req


typedef struct Empty_Req__storage_ {
  uint32_t _has_storage_[1];
} Empty_Req__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Empty_Req class]
                                     rootClass:[ModuleMessageRoot class]
                                          file:ModuleMessageRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(Empty_Req__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Empty_Rsp

@implementation Empty_Rsp

@dynamic hasBaseRsp, baseRsp;

typedef struct Empty_Rsp__storage_ {
  uint32_t _has_storage_[1];
  BaseRspMessage *baseRsp;
} Empty_Rsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseRsp",
        .dataTypeSpecific.className = GPBStringifySymbol(BaseRspMessage),
        .number = Empty_Rsp_FieldNumber_BaseRsp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Empty_Rsp__storage_, baseRsp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Empty_Rsp class]
                                     rootClass:[ModuleMessageRoot class]
                                          file:ModuleMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Empty_Rsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BaseRspMessage

@implementation BaseRspMessage

@dynamic level;
@dynamic resMap, resMap_Count;

typedef struct BaseRspMessage__storage_ {
  uint32_t _has_storage_[1];
  int32_t level;
  GPBInt32Int32Dictionary *resMap;
} BaseRspMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = BaseRspMessage_FieldNumber_Level,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BaseRspMessage__storage_, level),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "resMap",
        .dataTypeSpecific.className = NULL,
        .number = BaseRspMessage_FieldNumber_ResMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BaseRspMessage__storage_, resMap),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BaseRspMessage class]
                                     rootClass:[ModuleMessageRoot class]
                                          file:ModuleMessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BaseRspMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
